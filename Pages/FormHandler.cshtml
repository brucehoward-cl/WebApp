@page "/pages/form/{id:long?}"
@model FormHandlerModel
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Mvc.ModelBinding

<partial name="_Validation" />

<div class="m-2">
    <h5 class="bg-primary text-white text-center p-2">HTML Form</h5>
    <!--<form asp-page="FormHandler" method="post">-->
    <form asp-page="FormHandler" method="post" id="htmlform">
        <!-- id attribute used for buttons outside of form -->
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
            <label>Name</label>
            <div>
                <span asp-validation-for="Product.Name" class="text-danger"></span> <!--for validation errors-->
            </div>
            <!--<input class="form-control" name="Name" value="@Model.Product.Name" />-->
            <!--<input class="form-control" asp-for="Product.Name" />--> <!-- uses the nested properties -->
            <!--<input class="form-control" asp-for="Product.Name" name="name" />--> <!-- used for the Model Binding example (name property ensure binding works)-->
            <input class="form-control" asp-for="Product.Name" /> <!-- for use with the BindProperty attribute as used below -->
        </div>
        <div class="form-group">
            <label>Price</label>
            <div>
                <span asp-validation-for="Product.Price" class="text-danger"></span>  <!--for validation errors-->
            </div>
            <!--<input class="form-control" asp-for="Product.Price" />--><!-- uses the nested propertied -->
            <!--<input class="form-control" asp-for="Product.Price" name="price" />--> <!-- used for the Model Binding example (name property ensure binding works) -->
            <input class="form-control" asp-for="Product.Price" /> <!-- for use with the BindProperty attribute as used below -->
        </div>
        <!--<div class="form-group">
                <label>Category</label>
                <input class="form-control" asp-for="Product.Category.Name" />-->    <!-- uses the nested propertied -->
        <!--</div>
        <div class="form-group">
            <label>Supplier</label>
            <input class="form-control" asp-for="Product.Supplier.Name" />-->   <!-- uses the nested propertied -->
        <!--</div>-->
        <!--<div class="form-group">
                <label>Category Name</label>
                <input class="form-control" asp-for="Product.Category.Name" />
            </div>-->      <!-- Example using an alternate object for model binding -->

        <div class="form-group"> <!-- Example using model validation -->
            <label>CategoryId</label>
            <div>
                <span asp-validation-for="Product.CategoryId" class="text-danger"></span>
            </div>
            <input class="form-control" asp-for="Product.CategoryId" />
        </div>
        <div class="form-group">  <!-- Example using model validation -->
            <label>SupplierId</label>
            <div>
                <span asp-validation-for="Product.SupplierId" class="text-danger"></span>
            </div>
            <input class="form-control" asp-for="Product.SupplierId" />
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
    <button form="htmlform" asp-page="FormHandler" class="btn btn-primary mt-2">Submit (Outside Form)</button>
</div>

@functions {
    //[IgnoreAntiforgeryToken]
    public class FormHandlerModel : PageModel
    {
        private DataContext context;

        public FormHandlerModel(DataContext dbContext)
        {
            context = dbContext;
        }

        [BindProperty]
        public Product Product { get; set; }

        //[BindProperty(Name = "Product.Category")]
        //public Category Category { get; set; }      //example of binding alternate object

        public async Task OnGetAsync(long id = 1)
        {
            //Product = await context.Products.FindAsync(id);
            //Product = await context.Products.Include(p => p.Category)
            //                                .Include(p => p.Supplier)
            //                                .FirstAsync(p => p.ProductId == id); //include the nested properties

            Product = await context.Products.FirstAsync(p => p.ProductId == id); //for the model validation examples
        }

        #region OnPost() prior to Model Validation Examples
        ////public IActionResult OnPost() //used for the FormTagHelper examples (previous to Model Binding)
        ////public IActionResult OnPost(string name, decimal price) //used with the name attribute in tag helper
        //public IActionResult OnPost()  //used with BindProperty attribute
        //{
        //    TempData["product"] = System.Text.Json.JsonSerializer.Serialize(Product); //used with BindProperty attribute
        //    TempData["category"] = System.Text.Json.JsonSerializer.Serialize(Category); //alternate model binding object

        //    #region used with name attribute in tag helper
        //    //TempData["name param"] = name;
        //    //TempData["price param"] = price.ToString();
        //    #endregion

        //    //foreach (string key in Request.Form.Keys.Where(k => !k.StartsWith("_")))
        //    //{
        //    //    TempData[key] = string.Join(", ", Request.Form[key]);
        //    //} //commented out for the ModelBinding lesson; since properties are bound in the method signature, foreach not needed
        //    return RedirectToPage("FormResults");
        //} 
        #endregion

        #region Validation using non-custom attribute model validation (and also some non-attribute validation)
        //public IActionResult OnPost()       //used prior to adding custom attribute model validation
        //{
        //    if (string.IsNullOrEmpty(Product.Name))
        //    {
        //        ModelState.AddModelError("Product.Name", "Enter a name");
        //    }

        //    if (ModelState.GetValidationState("Product.Price") == ModelValidationState.Valid && Product.Price < 1)
        //    {
        //        ModelState.AddModelError("Product.Price", "Enter a positive price");
        //    }

        //    if (ModelState.GetValidationState("Product.Name") == ModelValidationState.Valid 
        //        && ModelState.GetValidationState("Product.Price") == ModelValidationState.Valid 
        //        && Product.Name.ToLower().StartsWith("small") 
        //        && Product.Price > 100)
        //    {
        //        ModelState.AddModelError("", "Small products cannot cost more than $100");
        //    }

        //    if (!context.Categories.Any(c => c.CategoryId == Product.CategoryId))
        //    {
        //        ModelState.AddModelError("Product.CategoryId", "Enter an existing category ID");
        //    }

        //    if (!context.Suppliers.Any(s => s.SupplierId == Product.SupplierId))
        //    {
        //        ModelState.AddModelError("Product.SupplierId", "Enter an existing supplier ID");
        //    }

        //    if (ModelState.IsValid)
        //    {
        //        TempData["name"] = Product.Name;
        //        TempData["price"] = Product.Price.ToString();
        //        TempData["categoryId"] = Product.CategoryId.ToString();
        //        TempData["supplierId"] = Product.SupplierId.ToString();
        //        return RedirectToPage("FormResults");
        //    }
        //    else
        //    {
        //        return Page();
        //    }
        //} 
        #endregion

        public IActionResult OnPost()   //used with custom attribute model validation
        {
            if (ModelState.IsValid)
            {
                TempData["name"] = Product.Name;
                TempData["price"] = Product.Price.ToString();
                TempData["categoryId"] = Product.CategoryId.ToString();
                TempData["supplierId"] = Product.SupplierId.ToString();
                return RedirectToPage("FormResults");
            }
            else
            {
                return Page();
            }
        }
    }
}
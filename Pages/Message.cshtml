@page "/pages/message"
@model MessageModel
@using Microsoft.AspNetCore.Mvc.RazorPages
@using System.Collections.Generic
@using Microsoft.AspNetCore.Http
@using WebApp.Filters
@using Microsoft.AspNetCore.Mvc.Filters


@if (Model.Message is string)
{
    @Model.Message
}
else if (Model.Message is IDictionary<string, string>)
{
    var dict = Model.Message as IDictionary<string, string>;
    <table class="table table-sm table-striped table-bordered">
        <thead><tr><th>Name</th><th>Value</th></tr></thead>
        <tbody>
            @foreach (var kvp in dict)
            {
                <tr><td>@kvp.Key</td><td>@kvp.Value</td></tr>
            }
        </tbody>
    </table>
}


@functions {
    [RequireHttps]  //applying a security filter at the class level automatically covers all action methods
    //[SimpleCache]  //custom resource attribute
    //[ChangePageArgs]  //custom page filter
    public class MessageModel : PageModel
    {
        public object Message { get; set; } = $"{DateTime.Now.ToLongTimeString()}: This is the Message Razor Page"; //used in conjunction with SimpleCache custom resource attribute
                                                                                                                    //public object Message { get; set; } = "This is the Message Razor Page";

        #region Implementing security policy inside the action method
        //public IActionResult OnGet()
        //{
        //    if (!Request.IsHttps)
        //    {
        //        return new StatusCodeResult(StatusCodes.Status403Forbidden);
        //    }
        //    else
        //    {
        //        return Page();
        //    }
        //}
        #endregion

        public void OnGet(string message1, string message2)   //for use with the custom page filter
        {
            Message = $"{message1}, {message2}";
        }

        public override void OnPageHandlerExecuting(PageHandlerExecutingContext context)
        {
            if (context.HandlerArguments.ContainsKey("message1"))
            {
                context.HandlerArguments["message1"] = "New message";
            }
        }
    }

}